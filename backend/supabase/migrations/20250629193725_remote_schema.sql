

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."transaction_action" AS ENUM (
    'customer_sell',
    'vendor_buy',
    'price_change'
);


ALTER TYPE "public"."transaction_action" OWNER TO "postgres";


COMMENT ON TYPE "public"."transaction_action" IS 'Represents different types of transactions: stock bought, stock sold, price changes';



CREATE TYPE "public"."transaction_type" AS ENUM (
    'sold_to_customer',
    'bought_from_vendor'
);


ALTER TYPE "public"."transaction_type" OWNER TO "postgres";


COMMENT ON TYPE "public"."transaction_type" IS 'Represents different types of transactions: stock bought, stock sold';



CREATE OR REPLACE FUNCTION "public"."quantity_in_stock_change_trigger"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    SET "search_path" TO ''
    AS $$
declare
  v_quantity bigint;
begin
  v_quantity := (SELECT quantity_in_stock FROM inventory WHERE product_name = NEW.product_name);
  -- We bought stock from a vendor
  IF v_quantity < NEW.quantity_in_stock THEN
    INSERT INTO transaction_logs (product, price, action) VALUES (NEW.product_name, NEW.vendor_cost, 'bought_from_vendor'::transaction_type);
    UPDATE cash_balance SET balance = (SELECT balance FROM cash_balance WHERE account_name = 'vending_machine') - NEW.vendor_cost WHERE account_name = 'vending_machine';
  -- We sold stock to a customer
  ELSIF v_quantity > NEW.quantity_in_stock THEN
    INSERT INTO transaction_logs (product, price, action) VALUES (NEW.product_name, NEW.retail_price, 'sold_to_customer'::transaction_type);
    UPDATE cash_balance SET balance = (SELECT balance FROM cash_balance WHERE account_name = 'vending_machine') + NEW.retail_price WHERE account_name = 'vending_machine';
  END IF;
  return NEW;
end
$$;


ALTER FUNCTION "public"."quantity_in_stock_change_trigger"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."cash_balance" (
    "account_name" "text" NOT NULL,
    "balance" double precision DEFAULT '1000'::double precision NOT NULL
);


ALTER TABLE "public"."cash_balance" OWNER TO "postgres";


COMMENT ON TABLE "public"."cash_balance" IS 'Contains the cash balance for a particular account or agent';



CREATE TABLE IF NOT EXISTS "public"."inventory" (
    "product_name" "text" NOT NULL,
    "vendor_cost" double precision DEFAULT '0'::double precision NOT NULL,
    "retail_price" double precision DEFAULT '0'::double precision NOT NULL,
    "quantity_in_stock" bigint DEFAULT '0'::bigint NOT NULL
);


ALTER TABLE "public"."inventory" OWNER TO "postgres";


COMMENT ON TABLE "public"."inventory" IS 'A list of items available in the vending machine';



CREATE TABLE IF NOT EXISTS "public"."transaction_logs" (
    "id" bigint NOT NULL,
    "product" "text" NOT NULL,
    "price" double precision DEFAULT '0'::double precision NOT NULL,
    "action" "public"."transaction_type" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."transaction_logs" OWNER TO "postgres";


COMMENT ON TABLE "public"."transaction_logs" IS 'Table that holds the transactions that were made by the vending machine (including sells to customers and purchases from vendors)';



ALTER TABLE "public"."transaction_logs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."transaction_log_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."cash_balance"
    ADD CONSTRAINT "cash_balance_pkey" PRIMARY KEY ("account_name");



ALTER TABLE ONLY "public"."inventory"
    ADD CONSTRAINT "inventory_pkey" PRIMARY KEY ("product_name");



ALTER TABLE ONLY "public"."transaction_logs"
    ADD CONSTRAINT "transaction_log_pkey" PRIMARY KEY ("id");



CREATE OR REPLACE TRIGGER "quantity_in_stock_change" BEFORE UPDATE ON "public"."inventory" FOR EACH ROW EXECUTE FUNCTION "public"."quantity_in_stock_change_trigger"();



ALTER TABLE ONLY "public"."transaction_logs"
    ADD CONSTRAINT "transaction_log_product_fkey" FOREIGN KEY ("product") REFERENCES "public"."inventory"("product_name");



CREATE POLICY "Enable insert access for all users" ON "public"."transaction_logs" FOR INSERT WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."inventory" FOR SELECT USING (true);



CREATE POLICY "Enable update for all purchases" ON "public"."inventory" FOR UPDATE USING (true);



CREATE POLICY "Enable update for trigger to update balance" ON "public"."cash_balance" FOR UPDATE USING (true);



ALTER TABLE "public"."cash_balance" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."inventory" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."transaction_logs" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

























































































































































GRANT ALL ON FUNCTION "public"."quantity_in_stock_change_trigger"() TO "anon";
GRANT ALL ON FUNCTION "public"."quantity_in_stock_change_trigger"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."quantity_in_stock_change_trigger"() TO "service_role";


















GRANT ALL ON TABLE "public"."cash_balance" TO "anon";
GRANT ALL ON TABLE "public"."cash_balance" TO "authenticated";
GRANT ALL ON TABLE "public"."cash_balance" TO "service_role";



GRANT ALL ON TABLE "public"."inventory" TO "anon";
GRANT ALL ON TABLE "public"."inventory" TO "authenticated";
GRANT ALL ON TABLE "public"."inventory" TO "service_role";



GRANT ALL ON TABLE "public"."transaction_logs" TO "anon";
GRANT ALL ON TABLE "public"."transaction_logs" TO "authenticated";
GRANT ALL ON TABLE "public"."transaction_logs" TO "service_role";



GRANT ALL ON SEQUENCE "public"."transaction_log_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."transaction_log_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."transaction_log_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
